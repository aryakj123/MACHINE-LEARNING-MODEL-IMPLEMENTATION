# -*- coding: utf-8 -*-
# ---
# jupyter:
#   jupytext:
#     formats: ipynb,py:light
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.14.5
#   kernelspec:
#     display_name: Python 3
#     language: python
#     name: python3
# ---

# # Spam SMS Detection with Scikit-learn

# This notebook demonstrates how to build a spam SMS detection model using scikit-learn and the SMS Spam Collection dataset from a URL.

# ## 1. Import Libraries

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns


# ## 2. Load and Prepare the Data
#
# We'll load the SMS Spam Collection dataset directly from the raw URL.

# In[2]:


# Load the data directly from the raw CSV URL
url = 'https://raw.githubusercontent.com/mohitgupta-1O1/Kaggle-SMS-Spam-Collection-Dataset-/master/spam.csv'
data = pd.read_csv(url, encoding = 'latin-1')
# Drop unnecessary columns and rename columns for ease of use
data = data.drop(columns = ['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], axis = 1)
data = data.rename(columns = {"v1":"label", "v2":"text"})

# Convert labels to numerical, 0 for ham and 1 for spam
data['label'] = data['label'].map({'ham':0, 'spam':1})
# Display the first few rows
data.head()


# In[3]:

# Check the data type
data.dtypes

# In[4]:

# Check for missing values
data.isnull().sum()


# In[5]:

# Separate features and target variable
X = data['text']
y = data['label']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ## 3. Feature Engineering: TF-IDF Vectorization
#
#   We'll use TF-IDF to convert the text data into numerical features.

# In[6]:


# Create a TF-IDF Vectorizer
tfidf_vectorizer = TfidfVectorizer(stop_words='english', max_df=0.85)

# Fit and transform the training data
X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)

# Transform the testing data
X_test_tfidf = tfidf_vectorizer.transform(X_test)

# ## 4. Model Selection and Training: Logistic Regression
#
# We'll use Logistic Regression for this classification task.

# In[7]:


# Create a Logistic Regression model
model = LogisticRegression(random_state=42)

# Train the model on the training data
model.fit(X_train_tfidf, y_train)

# ## 5. Model Evaluation
#
#  Let's evaluate the model's performance using accuracy, classification report, and confusion matrix.

# In[8]:


# Make predictions on the test data
y_pred = model.predict(X_test_tfidf)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")

# Display classification report
print("Classification Report:\n", classification_report(y_test, y_pred))

# Display confusion matrix
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)


# ## 6. Visualize Confusion Matrix
#
# Visualize the confusion matrix to understand prediction performance better.

# In[9]:


plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Ham', 'Spam'], yticklabels=['Ham', 'Spam'])
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix')
plt.show()

# ## 7. Example Predictions
# Let's try predicting on some new, unseen SMS messages.

# In[10]:


new_sms = [
    "Congratulations! You've won a free vacation!",
    "Hi, how are you doing today?",
    "Urgent! Claim your prize now!",
    "Meeting tomorrow at 10 AM"
]
new_sms_tfidf = tfidf_vectorizer.transform(new_sms)
predictions = model.predict(new_sms_tfidf)

for sms, prediction in zip(new_sms, predictions):
    print(f"SMS: {sms}")
    print(f"Prediction: {'Spam' if prediction == 1 else 'Not Spam'}")
    print("-" * 30)
